{"version":3,"sources":["actions/card.js","constants/index.js","components/SimpleSlider.js","components/Card.js","components/Head.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js","Logo.png"],"names":["insert","pg","trigger","posters","data","cut","splice","type","payload","SimpleSlider","next","_this","props","count","updatecount","getnext","last","getlast","imageClick","n","getfilmdata","this","getposters","_this2","course","settings","infinite","slidesToShow","vertical","beforeChange","current","afterChange","slidesToScroll","react_default","a","createElement","lib_default","map","poster","id","className","src","alt","onClick","React","Component","connect","state","post","dispatch","axios","get","then","res","catch","err","console","log","postData","params","numb","H1","styled","h1","_templateObject","Card","info","Head","Logo","width","initialState","combineReducers","arguments","length","undefined","action","Object","objectSpread","store","createStore","rootReducer","applyMiddleware","thunk","App","es","Grid_default","container","item","xs","components_SimpleSlider","components_Head","components_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.7b352844.chunk.js","sourcesContent":["import axios from 'axios'\nimport {\n\tGET_FILMDATA,\n\tGET_POSTERS,\n\tUPD_COUNT,\n\tGET_NEXT\n} from '../constants'\n\nexport const getposters = () => dispatch => {\n\taxios.get('/index/start')\n\t\t.then(res => dispatch({\n      type: GET_POSTERS,\n\t\t\tpayload: res.data\n\t\t}))\n\t\t.catch(err => console.log(err))\n}\n\nexport const getfilmdata = postData => dispatch => {\n\taxios.get('/index/card', { params: { numb: postData } })\n\t\t.then(res => dispatch({\n            type: GET_FILMDATA,\n\t\t\tpayload: res.data\n\t\t}))\n\t\t.catch(err => console.log(err))\n}\n\nexport const updatecount = (count) => dispatch => {\n\t dispatch({\n            type: UPD_COUNT,\n\t\t\tpayload: count\n\t\t})\n}\n\nexport const getnext = (trigger, posters) => dispatch => {\n\tlet pg = 'up';\n  axios.get('/index/pgup')\n\t   .then (res => dispatch(insert(pg, trigger, posters, res.data)))\n}\n\nexport const getlast = (trigger, posters) => dispatch => {\n\tlet pg = 'dn';\n\taxios.get('/index/pgdn')\n\t\t .then (res => dispatch(insert(pg, trigger, posters, res.data)))\n}\n\nexport const insert = (pg, trigger, posters, data)  => {\n\tlet cut\n\tif (pg === 'up'){\n\t  if (trigger === 0){\n\t\t  cut = 10\n\t\t  trigger = 1\n\t  }\n\t  else if (trigger === 1) {\n\t\t  cut = 0\n\t\t  trigger = 2\n\t  }\n\t  else if (trigger === 2) {\n\t\t  cut = 5\n\t \t  trigger = 0\n\t  }\n  }\n\telse if (pg === 'dn'){\n\t\tif (trigger === 0){\n\t\t\tcut = 5\n\t\t\ttrigger = 2\n\t\t}\n\t\telse if (trigger === 2) {\n\t\t\tcut = 0\n\t\t\ttrigger = 1\n\t\t}\n\t\telse if (trigger === 1) {\n\t\t\tcut = 10\n\t\t\ttrigger = 0\n\t\t}\n\t}\n\tposters.splice(cut, 5, [data[0][0], data[0][1]], [data[1][0], data[1][1]],\n\t\t\t\t\t\t\t\t\t\t\t   [data[2][0], data[2][1]], [data[3][0], data[3][1]],\n\t\t\t\t\t\t\t\t\t\t\t\t [data[4][0], data[4][1]])\n\treturn {\n\t\t  type: GET_NEXT,\n\t\t  payload: posters,\n\t\t  trigger: trigger\n\t }\n}\n","export const GET_FILMDATA = 'GET_FILMDATA'\nexport const GET_POSTERS = 'GET_POSTERS'\nexport const UPD_COUNT = 'UPD_COUNT'\nexport const GET_NEXT = 'GET_NEXT'\n","import React from \"react\";\nimport Slider from \"react-slick\";\nimport { getposters, getfilmdata, updatecount, getnext, getlast} from '../actions/card'\nimport { connect } from 'react-redux'\n\nclass SimpleSlider extends React.Component {\n  componentDidMount(){\n    this.props.getposters()\n  }\n  next = () => {\n    if (this.props.count < 4) {\n        this.props.updatecount(this.props.count + 1)\n    }\n    if (this.props.count === 4) {\n        this.props.updatecount(0)\n        this.props.getnext(this.props.trigger, this.props.posters)\n    }\n  }\n  last = () => {\n    if (this.props.count > -4) {\n      this.props.updatecount(this.props.count - 1)\n    }\n    if (this.props.count === -4) {\n      this.props.updatecount(0)\n      this.props.getlast(this.props.trigger, this.props.posters)\n    }\n  }\n  imageClick = (n) => {\n    this.props.getfilmdata(n)\n  }\n  render() {\n    const { posters } = this.props\n    let course = 0\n    var settings = {\n      infinite: true,\n      slidesToShow: 4,\n      vertical: true,\n      beforeChange: (current, next) => {\n\t\t    if (next === 0 && current === 14)  { next = 15 }\n\t\t    if (next === 14 && current === 0)  { current = 15 }\n        course = next - current\n\t    },\n      afterChange: () => {\n        if (course === 1) {\n          this.next()\n        }\n\t\t    if (course === -1) {\n           this.last()\n\t\t    }\n\t    },\n      slidesToScroll: 1\n  };\n  return (\n      <div>\n        <Slider {...settings}>\n        {posters.map(poster => (\n          <div id =\"posters\">\n              <img\n              className=\"image\"\n              src={'imgs/' + poster[1] +  'kad0.jpg'}\n              alt=''\n              onClick={() => this.imageClick(poster[0])}\n              />\n            </div>\n        ))}\n        </Slider>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => ({\n  posters: state.post.posters,\n  count: state.post.count,\n  trigger: state.post.trigger\n})\nexport default connect(mapStateToProps, { getposters, getfilmdata, updatecount, getnext, getlast })(SimpleSlider)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components';\n\nconst H1 = styled.h1`\n\t\tcolor: red;\n\t\tfont-size: 16px;\n\t\t`;\nclass Card extends Component {\n\trender () {\n\t\tconst { info } = this.props\n        \n\t\treturn (\n\t\t  <div>\n            <H1>{ info[0] }</H1>\n\t\t\t<h1>{ info[1] }</h1>\n\t\t  </div>\n\t\t)\n\t}\n}\nconst mapStateToProps = (state) => ({\n\tinfo: state.post.info\n})\nexport default connect(mapStateToProps)(Card)","import React, { Component } from 'react'\nimport Logo from '../Logo.png'\n\nconst Head = () => {\n\t\treturn (\n\t\t  <div>\n        <img src={Logo} alt=\"Logo\" width =\"150\"/>\n\t\t  </div>\n\t\t)\n}\nexport default Head\n","import {\n  GET_POSTERS,\n  GET_FILMDATA,\n  UPD_COUNT,\n  GET_NEXT\n} from '../constants'\n\nconst initialState = {\n  info: '',\n  posters: [],\n  trigger: 0,\n  count: 0\n}\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case GET_POSTERS:\n      return {\n        ...state,\n        posters: action.payload\n    }\n    case GET_FILMDATA:\n      return {\n        ...state,\n        info: action.payload\n      }\n    case UPD_COUNT:\n      return {\n        ...state,\n        count: action.payload\n    }\n    case GET_NEXT:\n      return {\n        ...state,\n        posters: action.payload,\n        trigger: action.trigger\n    }\n    default:\n\t\t\treturn state\n  }\n}\n","import { combineReducers } from 'redux'\nimport postReducer from './postReducer'\n\nexport default combineReducers({\n\tpost: postReducer,\n})","import { createStore, applyMiddleware } from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\n\nconst store = createStore(\n\trootReducer,\n\tapplyMiddleware(thunk)\n)\n\n\nexport default store \n","import React, { Component } from 'react';\nimport SimpleSlider from './components/SimpleSlider';\nimport Card from './components/Card';\nimport Head from './components/Head';\nimport './App.css';\nimport { Provider } from 'react-redux'\nimport Grid from '@material-ui/core/Grid'\nimport store from './store'\n\nclass App extends Component {\nrender() {\n  return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <Grid container>\n            <Grid item xs={2}>\n              <SimpleSlider />\n            </Grid>\n            <Grid item xs={7}>\n              <Head />\n              <Card />\n            </Grid>\n            <Grid item xs={2}>\n              <SimpleSlider />\n            </Grid>\n          </Grid>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('cent'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/Logo.f004b0ae.png\";"],"sourceRoot":""}